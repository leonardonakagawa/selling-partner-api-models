<?php
/**
* {{classname}}Test
* PHP version 7.4
*
* @category Class
* @package  {{invokerPackage}}
* @author   OpenAPI Generator team
* @link     https://openapi-generator.tech
*/



{{>partial_header}}
/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Please update the test case below to test the endpoint.
*/

namespace {{invokerPackage}}\Test\Api;

use {{invokerPackage}}\Configuration;
use {{invokerPackage}}\ApiException;
use PHPUnit\Framework\TestCase;
use {{invokerPackage}}\Api\{{classname}};
use OpenAPI\Client\Test\TestHelper;
use SpApi\AuthAndAuth\LWAAuthorizationCredentials;
use Dotenv\Dotenv;

$dotenv = Dotenv::createImmutable('../../../sdk');
$dotenv->load();


/**
* {{classname}}Test Class Doc Comment
*
* @category Class
* @package  {{invokerPackage}}
* @author   OpenAPI Generator team
* @link     https://openapi-generator.tech
*/
{{#operations}}
class {{classname}}Test extends TestCase
{
    private {{classname}} $apiInstance;
    private TestHelper $testHelper;

    public function setUp(): void
    {
        $lwaAuthorizationCredentials = new LWAAuthorizationCredentials([
        "clientId" => $_ENV['SP_API_CLIENT_ID'],
        "clientSecret" => $_ENV['SP_API_CLIENT_SECRET'],
        "refreshToken" => $_ENV['SP_API_REFRESH_TOKEN'],
        "endpoint" => $_ENV['SP_API_ENDPOINT'] ?: "https://api.amazon.com/auth/o2/token"
        ]);
        $config = new Configuration([], $lwaAuthorizationCredentials);
        $config->setHost($_ENV['SP_API_ENDPOINT_HOST'] ?: 'https://sandbox.sellingpartnerapi-fe.amazon.com');
        $this->apiInstance = new {{classname}}($config, null, null);
        $this->testHelper = new TestHelper();
    }

    /**
    * Handles the response based on the expected HTTP status code.
    *
    * @param mixed $response The API response.
    * @param int $statusCode The actual HTTP status code.
    * @param int $expectedStatusCode The expected HTTP status code.
    * @throws \ReflectionException
    */
    private function handleResponse($response, int $statusCode, int $expectedStatusCode, $responseParams): void
    {
    switch ($expectedStatusCode) {
    case 200:
    $payload = $response->getPayload();
    $this->assertNotNull($payload);
    $returnTypeInfo = $this->testHelper->getReturnTypeInfo($response);
    if ($returnTypeInfo) {
    [$returnTypeName, $isNullable] = $returnTypeInfo;
    if (class_exists($returnTypeName)) {
    $expectedInstance = new $returnTypeName();
    $this->testHelper->mapAttributes($expectedInstance, $responseParams['payload'] ?? []);
    $this->assertEquals($expectedInstance, $payload);
    } else {
    echo "Class $returnTypeName does not exist.";
    }
    } else {
    echo "No return type specified for getPayload.";
    }
    break;

    case 204:
    $this->assertTrue(true);
    echo "Response is empty as expected for status code 204.";
    break;

    case 400:
    $this->assertArrayHasKey('errors', $responseParams);
    $this->assertEquals($responseParams['errors'], $response->getErrors());
    break;

    default:
    $this->fail("Unhandled response code: $expectedStatusCode");
    break;
    }
    }

    /**
    * Handles exceptions thrown during the API call.
    *
    * @param ApiException $e The exception thrown by the API.
    */
    private function handleApiException(ApiException $e, int $expectedCode): void
    {
    if ($e->getCode() == $expectedCode) {
    $this->assertTrue(true);
    } else {
    $this->fail('Unexpected error code: ' . $e->getCode());
    }
    }

    {{#operation}}
        {{#responses}}
            /**
            * Test case for {{{operationId}}}_{{code}}
            * {{{description}}}.
            */
            public function test{{operationIdCamelCase}}{{code}}()
            {
            {{^vendorExtensions.x-amzn-api-sandbox.static}}
                // Skip this test if no static sandbox extension is present
                $this->markTestSkipped('Static sandbox is not defined for this operation.');
            {{/vendorExtensions.x-amzn-api-sandbox.static}}
            {{#vendorExtensions.x-amzn-api-sandbox.static}}
                try {
                // Get RequestParameter using ReflectionMethod
                $reflection = $this->testHelper->getReflectionMethod($this->apiInstance, '{{operationId}}WithHttpInfo');
                $params = $reflection->getParameters();

                //ã€€Build Request Json for Request to static SandBox
                $invalidRequestJson = '{{#request}}{{parameters}}{{/request}};';
                $requestParameters = $this->testHelper->convertCodegenResponseToJson($invalidRequestJson);

                // Prepare Request Parameters
                $requestParams = $this->testHelper->prepareRequestParams($params, $requestParameters);

                //Build Expected Response Json for Assert
                $invalidResponseJson = '{{response}}';
                $expectedResponse = $this->testHelper->convertCodegenResponseToJson($invalidResponseJson);
                $responseParams = $this->testHelper->getResponseParams($expectedResponse);

                // Act: Call API
                list($response, $statusCode, $headers) =
                $this->apiInstance->{{operationId}}WithHttpInfo(...array_values($requestParams));

                // Assert Http response code
                $expectedStatusCode = {{code}};
                $this->assertEquals($expectedStatusCode, $statusCode);

                // Handle different response codes
                $this->handleResponse($response, $statusCode, $expectedStatusCode, $responseParams);
                } catch (ApiException $e) {
                $this->handleApiException($e, {{code}});
                } catch (\ReflectionException $e) {
                $this->fail("Reflection exception: " . $e->getMessage());
                }
            {{/vendorExtensions.x-amzn-api-sandbox.static}}
            }
        {{/responses}}
    {{/operation}}
    }
{{/operations}}
